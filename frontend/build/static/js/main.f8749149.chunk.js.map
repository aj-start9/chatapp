{"version":3,"sources":["hoc/Layout/Layout.js","containers/auth/auth.js","containers/chat/sidebar/sidebar.js","containers/chat/content/content.js","App.js","containers/chat/chat.js","serviceWorker.js","index.js","containers/chat/chat.module.css","hoc/Layout/Layout.module.css","containers/auth/auth.module.css","containers/chat/sidebar/sidebar.module.css"],"names":["Layout","className","classes","main_div","this","props","children","React","Component","Auth","responseGoogle","response","console","log","Axios","post","token","tokenId","then","res","data","history","push","handleSuccess","handleFailure","error","clientId","buttonText","onSuccess","cookiePolicy","uxMode","onFailure","redirectUri","scope","Sidebar","Content","App","path","component","LinkedInPopUp","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports"],"mappings":"gQAceA,E,uKARP,OACI,yBAAKC,UAAWC,IAAQC,UACnBC,KAAKC,MAAMC,c,GAJPC,IAAMC,W,mECqDZC,E,4MA7CXC,eAAiB,SAACC,GACdC,QAAQC,IAAIF,GACZG,IAAMC,KAAK,iDAAkD,CAAEC,MAAOL,EAASM,UAC1EC,MAAK,SAAAC,GACFP,QAAQC,IAAIM,EAAIC,MAChB,EAAKf,MAAMgB,QAAQC,KAAK,a,EAIpCC,cAAgB,SAACH,GACbR,QAAQC,IAAIO,I,EAIhBI,cAAgB,SAACC,GACbb,QAAQC,IAAIY,I,uDAIZ,OACI,kBAAC,EAAD,KACI,yBAAKxB,UAAWC,IAAQC,UACpB,kBAAC,IAAD,CACIuB,SAAS,2EACTC,WAAW,gBACXC,UAAWxB,KAAKM,eAEhBmB,aAAc,qBACdC,OAAO,UAEX,kBAAC,IAAD,CACIJ,SAAS,iBACTK,UAAW3B,KAAKoB,cAChBI,UAAWxB,KAAKmB,cAChBS,YAAY,wBACZC,MAAM,yB,GArCX1B,IAAMC,W,kCCGV0B,E,uKARP,OACI,yBAAKjC,UAAWC,IAAQC,UAAxB,e,GAHUI,IAAMC,WCUb2B,G,8KARP,OACI,4C,GAHU5B,IAAMC,YCoBb4B,GCZI7B,IAAMC,U,uKDArB,OACE,yBAAKP,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoC,KAAK,QAAQC,UAAWC,MAC/B,kBAAC,IAAD,CAAOF,KAAK,IAAIC,UAAW7B,U,GANnBF,IAAMC,YEGJgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7B,GACLb,QAAQa,MAAMA,EAAM8B,a,mBExI5BC,EAAOC,QAAU,CAAC,SAAW,uBAAuB,QAAU,sBAAsB,QAAU,wB,mBCA9FD,EAAOC,QAAU,CAAC,SAAW,2B,mBCA7BD,EAAOC,QAAU,CAAC,SAAW,yB,mBCA7BD,EAAOC,QAAU,CAAC,SAAW,4B","file":"static/js/main.f8749149.chunk.js","sourcesContent":["import React from 'react'\nimport classes from './Layout.module.css'\n\n\nclass Layout extends React.Component {\n    render() {\n        return (\n            <div className={classes.main_div}>\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default Layout","import React from 'react'\nimport Layout from './../../hoc/Layout/Layout'\nimport GoogleLogin from 'react-google-login';\nimport io from 'socket.io-client';\nimport Axios from 'axios'\nimport classes from './auth.module.css'\nimport { LinkedIn } from 'react-linkedin-login-oauth2';\n\n\n\nclass Auth extends React.Component {\n\n    responseGoogle = (response) => {\n        console.log(response)\n        Axios.post('http://localhost:5000/register?authType=google', { token: response.tokenId })\n            .then(res => {\n                console.log(res.data)\n                this.props.history.push('/chat')\n            })\n    }\n\n    handleSuccess = (data) => {\n        console.log(data)\n    }\n\n\n    handleFailure = (error) => {\n        console.log(error)\n      }\n\n    render() {\n        return (\n            <Layout>\n                <div className={classes.main_div}>\n                    <GoogleLogin\n                        clientId=\"245937553496-jj986qcag03f80buncc0grjq5mos2vun.apps.googleusercontent.com\"\n                        buttonText=\"GOOGLE SIGNIN\"\n                        onSuccess={this.responseGoogle}\n                        // onFailure={this.responseGoogle }\n                        cookiePolicy={'single_host_origin'}\n                        uxMode=\"popup\"\n                    />\n                    <LinkedIn\n                        clientId=\"78f2x3kppicuu0\"\n                        onFailure={this.handleFailure}\n                        onSuccess={this.handleSuccess}\n                        redirectUri=\"http://localhost:3000\"\n                        scope=\"r_emailaddress\"\n                    >\n                    </LinkedIn>\n                </div>\n            </Layout>\n        )\n    }\n}\n\n\nexport default Auth","import React from 'react'\nimport classes from './sidebar.module.css'\n\nclass Sidebar extends React.Component {\n    render() {\n        return (\n            <div className={classes.main_div}>\n                sidebar\n            </div>\n        )\n    }\n}\n\nexport default Sidebar","import React from 'react'\nimport classes from './content.module.css'\n\nclass Content extends React.Component {\n    render() {\n        return (\n            <div>\n                Content\n            </div>\n        )\n    }\n}\n\nexport default Content","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom'\nimport Auth from './containers/auth/auth'\nimport Chat from './containers/chat/chat'\nimport { LinkedInPopUp } from 'react-linkedin-login-oauth2';\n\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/chat\" component={LinkedInPopUp} />\n          <Route path=\"/\" component={Auth} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","import React from 'react'\nimport io from 'socket.io-client';\nimport classes from './chat.module.css'\nimport Sidebar from './sidebar/sidebar'\nimport Content from './content/content'\n\n// const socket = io.connect('http://localhost:5000', {\n//     path: '/socket.io/item'\n// });\n\n\nclass Chat extends React.Component {\n\n    state = {\n        message: '',\n        message_list: []\n    }\n\n    componentDidMount() {\n        // const socket = io.connect('http://localhost:5000', {\n        //     path: '/socket.io/item'\n        // });\n        // socket.on('connect', function () { console.log('connected') });\n        // socket.on('news', (data) => {\n        //     let data1 = JSON.parse(data.items)\n        //     console.log(typeof (data1))\n        //     console.log(data1)\n        //     this.setState({ message_list: data1 })\n        // });\n    }\n\n    send = (e) => {\n        e.preventDefault()\n        // socket.emit('push', { item: this.state.message })\n    }\n\n\n    messgeHandler = (e) => {\n        this.setState({ message: e.target.value })\n    }\n\n\n    render() {\n\n\n        return (\n                <div className={classes.main_div}>\n                    {/* <input type=\"text\" value={this.state.message} onChange={e => this.messgeHandler(e)} />\n                    <button onClick={this.send}>Send</button>\n                    {this.state.message_list.map((message,index) => <p key={index}>{message.item}</p>)} */}\n                    <div className={classes.sidebar}> \n                        <Sidebar />\n                    </div>\n                    <div className={classes.content}>\n                        <Content />\n                    </div>\n\n                </div>\n        )\n    }\n}\n\nexport default Chat","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_div\":\"chat_main_div__2NeV5\",\"sidebar\":\"chat_sidebar__tQY_i\",\"content\":\"chat_content__23IFx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_div\":\"Layout_main_div__3GGDA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_div\":\"auth_main_div__2vwXl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_div\":\"sidebar_main_div__yuPlG\"};"],"sourceRoot":""}